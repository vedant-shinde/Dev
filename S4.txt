************Ass4 = Q1.Create a directory structure using the Composite pattern. You should be able to add File 
and Folder objects. The Folder can contain multiple File objects and other Folder objects. 
 Hint: • Create a Component interface with methods like showDetails().  
           • Implement File and Folder classes based on this interface. ***************
➔1.interface component = 
public interface Component { 
    void showDetails(); 
} 
2.file.java = 
import java.util.ArrayList; 
import java.util.List; 
public class File implements Component { 
    private String name; 
    public File(String name) { 
        this.name = name; 
    } 
    @Override 
    public void showDetails() { 
        System.out.println("File: " + name); 
    } } 
3.folder.java = 
import java.util.ArrayList; 
import java.util.List; 
public class Folder implements Component { 
    private String name; 
    private List<Component> components = new ArrayList<>(); 
    public Folder(String name) { 
        this.name = name; 
    } 
    public void addComponent(Component component) { 
        components.add(component); 
    } 
    public void removeComponent(Component component) { 
        components.remove(component); 
    } 
    public String getName() { 
        return name; 
    } 
    @Override 
    public void showDetails() { 
        System.out.println("Folder: " + name); 
        for (Component component : components) { 
            component.showDetails(); 
        } } 
4.directorystructure.java = 
import java.util.Scanner; 
public class DirectoryStructure { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        Folder rootFolder = new Folder("root"); 
        while (true) { 
            System.out.println("Choose an action:"); 
            System.out.println("1. Add File"); 
            System.out.println("2. Add Folder"); 
            System.out.println("3. Show Details"); 
            System.out.println("4. Exit"); 
            System.out.print("Your choice: "); 
            int choice = scanner.nextInt(); 
            scanner.nextLine(); // Consume newline 
            switch (choice) { 
                case 1: 
                    System.out.print("Enter file name: "); 
                    String fileName = scanner.nextLine(); 
                    File file = new File(fileName); 
                    rootFolder.addComponent(file); 
                    break; 
                case 2: 
                    System.out.print("Enter folder name: "); 
                    String folderName = scanner.nextLine(); 
                    Folder folder = new Folder(folderName); 
                    rootFolder.addComponent(folder); 
                    addSubComponents(scanner, folder); 
                    break; 
                case 3: 
                    rootFolder.showDetails(); 
                    break; 
                case 4: 
                    System.out.println("Exiting..."); 
                    scanner.close(); 
                    return; 
                default: 
                    System.out.println("Invalid choice! Please select again."); 
            } } } 
    private static void addSubComponents(Scanner scanner, Folder parentFolder) { 
        while (true) { 
            System.out.println("Add sub-component to folder: " + parentFolder.getName()); 
            System.out.println("1. Add File"); 
            System.out.println("2. Add Folder"); 
            System.out.println("3. Go Back"); 
            System.out.print("Your choice: "); 
            int choice = scanner.nextInt(); 
            scanner.nextLine(); // Consume newline 
            switch (choice) { 
                case 1: 
                    System.out.print("Enter file name: "); 
                    String fileName = scanner.nextLine(); 
                    File file = new File(fileName); 
                    parentFolder.addComponent(file); 
                    break; 
                case 2: 
                    System.out.print("Enter folder name: "); 
                    String folderName = scanner.nextLine(); 
                    Folder folder = new Folder(folderName); 
                    parentFolder.addComponent(folder); 
                    addSubComponents(scanner, folder); 
                    break; 
                case 3: 
                    return; 
                default: 
                    System.out.println("Invalid choice! Please select again."); 
            } } } } 
 
*************Q2. Implement a bridge pattern where you have a Vehicle interface with methods startEngine() 
and stopEngine(). You also have two types of Engine classes: PetrolEngine and ElectricEngine. 
Implement two vehicle types: Car and Motorbike. Each vehicle should be able to use either type of 
engine, demonstrating the flexibility of the bridge pattern.  
Hint: • Vehicle interface will use Engine interface methods. **************
➔1.vehicle.java = 
public abstract class Vehicle { 
    protected Engine engine; 
    public Vehicle(Engine engine) { 
        this.engine = engine; 
    } 
    public abstract void startEngine(); 
    public abstract void stopEngine(); 
} 
2.interface engine = 
public interface Engine { 
    void start(); 
    void stop(); 
} 
3.motorbike.java = 
public class Motorbike extends Vehicle { 
  public Motorbike(Engine engine) { 
      super(engine); 
  } 
  @Override 
  public void startEngine() { 
      System.out.println("Motorbike: "); 
      engine.start(); 
  } 
  @Override 
  public void stopEngine() { 
      System.out.println("Motorbike: "); 
      engine.stop(); 
  } } 
4.petrolengine.java = 
public class PetrolEngine implements Engine { 
 @Override 
 public void start() { 
     System.out.println("Petrol engine starting..."); 
 } 
 @Override 
 public void stop() { 
     System.out.println("Petrol engine stopping..."); 
 } } 
5.electricengine.java = 
public class ElectricEngine implements Engine { 
  @Override 
  public void start() { 
      System.out.println("Electric engine starting..."); 
  } 
  @Override 
  public void stop() { 
      System.out.println("Electric engine stopping..."); 
  } } 
6.car.java = 
public class Car extends Vehicle { 
 public Car(Engine engine) { 
     super(engine); 
 } 
 @Override 
 public void startEngine() { 
     System.out.println("Car: "); 
     engine.start(); 
 } 
 
 @Override 
 public void stopEngine() { 
     System.out.println("Car: "); 
     engine.stop(); 
 } } 
7.bridgepatterndemo.java = 
import java.util.Scanner; 
public class BridgePatternDemo { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        Vehicle vehicle = null; 
        while (true) { 
            System.out.println("Choose a vehicle type:"); 
            System.out.println("1. Car"); 
            System.out.println("2. Motorbike"); 
            System.out.println("3. Exit"); 
            System.out.print("Your choice: "); 
            int choice = scanner.nextInt(); 
            if (choice == 3) { 
                break; 
            } 
            System.out.println("Choose an engine type:"); 
            System.out.println("1. Petrol Engine"); 
            System.out.println("2. Electric Engine"); 
            System.out.print("Your choice: "); 
            int engineChoice = scanner.nextInt(); 
            Engine engine = (engineChoice == 1) ? new PetrolEngine() : new ElectricEngine(); 
            switch (choice) { 
                case 1: 
                    vehicle = new Car(engine); 
                    break; 
                case 2: 
                    vehicle = new Motorbike(engine); 
                    break; 
                default: 
                    System.out.println("Invalid choice! Please select again."); 
                    continue; 
            } 
            vehicle.startEngine(); 
            vehicle.stopEngine(); 
        } 
        scanner.close(); 
    } } 
 
 
 
***********Q3. You are tasked with designing an organizational structure using the composite pattern. Create 
a Employee class and a Manager class. A Manager can have multiple employees reporting to them. 
Implement the structure where a Manager can delegate tasks to Employee objects and also 
manage other Manager objects.  
Hint: • Use the composite pattern to represent managers and employees as a tree structure.**************** 
➔1.interface employee = 
public interface Employee { 
    void showDetails(); 
    void performTask(String task); 
} 
2.employeeimpl.java = 
public class EmployeeImpl implements Employee { 
    private String name; 
    public EmployeeImpl(String name) { 
        this.name = name; 
    } 
    @Override 
    public void showDetails() { 
        System.out.println("Employee: " + name); 
    } 
    @Override 
    public void performTask(String task) { 
        System.out.println(name + " is performing task: " + task); 
    } } 
3.manager.java = 
import java.util.ArrayList; 
import java.util.List; 
public class Manager implements Employee { 
    private String name; 
    private List<Employee> employees = new ArrayList<>(); 
    public Manager(String name) { 
        this.name = name; 
    } 
    public void addEmployee(Employee employee) { 
        employees.add(employee); 
    } 
    public void removeEmployee(Employee employee) { 
        employees.remove(employee); 
    } 
    public String getName() { 
        return name; 
    } 
    @Override 
    public void showDetails() { 
        System.out.println("Manager: " + name); 
        for (Employee employee : employees) { 
            employee.showDetails(); 
        } } 
    @Override 
    public void performTask(String task) { 
        System.out.println(name + " is delegating task: " + task); 
        for (Employee employee : employees) { 
            employee.performTask(task); 
        } } } 
4.orgnizationstructure.java = 
import java.util.Scanner; 
public class OrganizationStructure { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        Manager rootManager = new Manager("CEO"); 
        while (true) { 
            System.out.println("Choose an action:"); 
            System.out.println("1. Add Employee"); 
            System.out.println("2. Add Manager"); 
            System.out.println("3. Show Organization Structure"); 
            System.out.println("4. Delegate Task"); 
            System.out.println("5. Exit"); 
            System.out.print("Your choice: "); 
            int choice = scanner.nextInt(); 
            scanner.nextLine(); // Consume newline 
            switch (choice) { 
                case 1: 
                    System.out.print("Enter employee name: "); 
                    String employeeName = scanner.nextLine(); 
                    Employee employee = new EmployeeImpl(employeeName); 
                    rootManager.addEmployee(employee); 
                    break; 
                case 2: 
                    System.out.print("Enter manager name: "); 
                    String managerName = scanner.nextLine(); 
                    Manager manager = new Manager(managerName); 
                    rootManager.addEmployee(manager); 
                    addSubordinates(scanner, manager); 
                    break; 
                case 3: 
                    rootManager.showDetails(); 
                    break; 
                case 4: 
                    System.out.print("Enter task: "); 
                    String task = scanner.nextLine(); 
                    rootManager.performTask(task); 
                    break; 
                case 5: 
                    System.out.println("Exiting..."); 
                    scanner.close(); 
                    return; 
                default: 
                    System.out.println("Invalid choice! Please select again."); 
            } } } 
    private static void addSubordinates(Scanner scanner, Manager parentManager) { 
        while (true) { 
            System.out.println("Add sub-ordinate to manager: " + parentManager.getName()); 
            System.out.println("1. Add Employee"); 
            System.out.println("2. Add Manager"); 
            System.out.println("3. Go Back"); 
            System.out.print("Your choice: "); 
            int choice = scanner.nextInt(); 
            scanner.nextLine();  
            switch (choice) { 
                case 1: 
                    System.out.print("Enter employee name: "); 
                    String employeeName = scanner.nextLine(); 
                    Employee employee = new EmployeeImpl(employeeName); 
                    parentManager.addEmployee(employee); 
                    break; 
                case 2: 
                    System.out.print("Enter manager name: "); 
                    String managerName = scanner.nextLine(); 
                    Manager manager = new Manager(managerName); 
                    parentManager.addEmployee(manager); 
                    addSubordinates(scanner, manager); 
                    break; 
                case 3: 
                    return; 
                default: 
                    System.out.println("Invalid choice! Please select again."); 
            } } } } 
 
***********Q4. Implement a proxy pattern to control access to a BankAccount class. The real class 
BankAccount has methods like deposit() and withdraw(). The BankAccountProxy will control 
access to these methods, ensuring that withdrawals can only be made if the account has sufficient 
balance.  
Hint: • The proxy class can check if the account has enough balance before allowing the 
withdrawal. **************
➔1.interface banckaccount = 
public interface BankAccount { 
    void deposit(double amount); 
    void withdraw(double amount); 
    double getBalance(); 
} 
2.bankaccountproxy.java  = 
public class BankAccountProxy implements BankAccount { 
    private RealBankAccount realBankAccount; 
    public BankAccountProxy() { 
        this.realBankAccount = new RealBankAccount(); 
    } 
    @Override 
    public void deposit(double amount) { 
        realBankAccount.deposit(amount); 
    } 
    @Override 
    public void withdraw(double amount) { 
        if (realBankAccount.getBalance() >= amount) { 
            realBankAccount.withdraw(amount); 
        } else { 
            System.out.println("Proxy: Insufficient balance to withdraw: " + amount); 
        } } 
    @Override 
    public double getBalance() { 
        return realBankAccount.getBalance(); 
    } } 
3.proxypatterndemo.java = 
import java.util.Scanner; 
public class ProxyPatternDemo { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        BankAccount bankAccount = new BankAccountProxy(); 
        while (true) { 
            System.out.println("Choose an action:"); 
            System.out.println("1. Deposit"); 
            System.out.println("2. Withdraw"); 
            System.out.println("3. Check Balance"); 
            System.out.println("4. Exit"); 
            System.out.print("Your choice: "); 
            int choice = scanner.nextInt(); 
            switch (choice) { 
                case 1: 
                    System.out.print("Enter amount to deposit: "); 
                    double depositAmount = scanner.nextDouble(); 
                    bankAccount.deposit(depositAmount); 
                    break; 
                case 2: 
                    System.out.print("Enter amount to withdraw: "); 
                    double withdrawAmount = scanner.nextDouble(); 
                    bankAccount.withdraw(withdrawAmount); 
                    break; 
                case 3: 
                    System.out.println("Current balance: " + bankAccount.getBalance()); 
                    break; 
                case 4: 
                    System.out.println("Exiting..."); 
                    scanner.close(); 
                    return; 
                default: 
                    System.out.println("Invalid choice! Please select again."); 
            } } } } 
4.realbankaccount.java = 
public class RealBankAccount implements BankAccount { 
    private double balance; 
    @Override 
    public void deposit(double amount) { 
        balance += amount; 
        System.out.println("Deposited: " + amount); 
    } 
    @Override 
    public void withdraw(double amount) { 
        if (balance >= amount) { 
            balance -= amount; 
            System.out.println("Withdrew: " + amount); 
        } else { 
            System.out.println("Insufficient balance to withdraw: " + amount); 
        } } 
    @Override 
    public double getBalance() { 
        return balance; 
    } }
